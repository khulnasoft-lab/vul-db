// Code generated by mockery v1.0.0. DO NOT EDIT.

package osv

import mock "github.com/stretchr/testify/mock"

// MockVersionRange is an autogenerated mock type for the VersionRange type
type MockVersionRange struct {
	mock.Mock
}

type VersionRangeContainsArgs struct {
	Ver         string
	VerAnything bool
}

type VersionRangeContainsReturns struct {
	_a0 bool
	_a1 error
}

type VersionRangeContainsExpectation struct {
	Args    VersionRangeContainsArgs
	Returns VersionRangeContainsReturns
}

func (_m *MockVersionRange) ApplyContainsExpectation(e VersionRangeContainsExpectation) {
	var args []interface{}
	if e.Args.VerAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Ver)
	}
	_m.On("Contains", args...).Return(e.Returns._a0, e.Returns._a1)
}

func (_m *MockVersionRange) ApplyContainsExpectations(expectations []VersionRangeContainsExpectation) {
	for _, e := range expectations {
		_m.ApplyContainsExpectation(e)
	}
}

// Contains provides a mock function with given fields: ver
func (_m *MockVersionRange) Contains(ver string) (bool, error) {
	ret := _m.Called(ver)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(ver)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type VersionRangeSetFixedArgs struct {
	Fixed         string
	FixedAnything bool
}

type VersionRangeSetFixedExpectation struct {
	Args VersionRangeSetFixedArgs
}

func (_m *MockVersionRange) ApplySetFixedExpectation(e VersionRangeSetFixedExpectation) {
	var args []interface{}
	if e.Args.FixedAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Fixed)
	}
	_m.On("SetFixed", args...)
}

func (_m *MockVersionRange) ApplySetFixedExpectations(expectations []VersionRangeSetFixedExpectation) {
	for _, e := range expectations {
		_m.ApplySetFixedExpectation(e)
	}
}

// SetFixed provides a mock function with given fields: fixed
func (_m *MockVersionRange) SetFixed(fixed string) {
	_m.Called(fixed)
}

type VersionRangeSetLastAffectedArgs struct {
	LastAffected         string
	LastAffectedAnything bool
}

type VersionRangeSetLastAffectedExpectation struct {
	Args VersionRangeSetLastAffectedArgs
}

func (_m *MockVersionRange) ApplySetLastAffectedExpectation(e VersionRangeSetLastAffectedExpectation) {
	var args []interface{}
	if e.Args.LastAffectedAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.LastAffected)
	}
	_m.On("SetLastAffected", args...)
}

func (_m *MockVersionRange) ApplySetLastAffectedExpectations(expectations []VersionRangeSetLastAffectedExpectation) {
	for _, e := range expectations {
		_m.ApplySetLastAffectedExpectation(e)
	}
}

// SetLastAffected provides a mock function with given fields: lastAffected
func (_m *MockVersionRange) SetLastAffected(lastAffected string) {
	_m.Called(lastAffected)
}

type VersionRangeStringReturns struct {
	_a0 string
}

type VersionRangeStringExpectation struct {
	Returns VersionRangeStringReturns
}

func (_m *MockVersionRange) ApplyStringExpectation(e VersionRangeStringExpectation) {
	var args []interface{}
	_m.On("String", args...).Return(e.Returns._a0)
}

func (_m *MockVersionRange) ApplyStringExpectations(expectations []VersionRangeStringExpectation) {
	for _, e := range expectations {
		_m.ApplyStringExpectation(e)
	}
}

// String provides a mock function with given fields:
func (_m *MockVersionRange) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
