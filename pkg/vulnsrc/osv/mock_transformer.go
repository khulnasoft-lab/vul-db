// Code generated by mockery v1.0.0. DO NOT EDIT.

package osv

import mock "github.com/stretchr/testify/mock"

// MockTransformer is an autogenerated mock type for the Transformer type
type MockTransformer struct {
	mock.Mock
}

type TransformerTransformAdvisoriesArgs struct {
	_a0         []Advisory
	_a0Anything bool
	_a1         Entry
	_a1Anything bool
}

type TransformerTransformAdvisoriesReturns struct {
	_a0 []Advisory
	_a1 error
}

type TransformerTransformAdvisoriesExpectation struct {
	Args    TransformerTransformAdvisoriesArgs
	Returns TransformerTransformAdvisoriesReturns
}

func (_m *MockTransformer) ApplyTransformAdvisoriesExpectation(e TransformerTransformAdvisoriesExpectation) {
	var args []interface{}
	if e.Args._a0Anything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args._a0)
	}
	if e.Args._a1Anything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args._a1)
	}
	_m.On("TransformAdvisories", args...).Return(e.Returns._a0, e.Returns._a1)
}

func (_m *MockTransformer) ApplyTransformAdvisoriesExpectations(expectations []TransformerTransformAdvisoriesExpectation) {
	for _, e := range expectations {
		_m.ApplyTransformAdvisoriesExpectation(e)
	}
}

// TransformAdvisories provides a mock function with given fields: _a0, _a1
func (_m *MockTransformer) TransformAdvisories(_a0 []Advisory, _a1 Entry) ([]Advisory, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []Advisory
	if rf, ok := ret.Get(0).(func([]Advisory, Entry) []Advisory); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Advisory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]Advisory, Entry) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
