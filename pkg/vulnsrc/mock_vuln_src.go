// Code generated by mockery v1.0.0. DO NOT EDIT.

package vulnsrc

import (
	types "github.com/khulnasoft-lab/vul-db/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// MockVulnSrc is an autogenerated mock type for the VulnSrc type
type MockVulnSrc struct {
	mock.Mock
}

type VulnSrcNameReturns struct {
	_a0 types.SourceID
}

type VulnSrcNameExpectation struct {
	Returns VulnSrcNameReturns
}

func (_m *MockVulnSrc) ApplyNameExpectation(e VulnSrcNameExpectation) {
	var args []interface{}
	_m.On("Name", args...).Return(e.Returns._a0)
}

func (_m *MockVulnSrc) ApplyNameExpectations(expectations []VulnSrcNameExpectation) {
	for _, e := range expectations {
		_m.ApplyNameExpectation(e)
	}
}

// Name provides a mock function with given fields:
func (_m *MockVulnSrc) Name() types.SourceID {
	ret := _m.Called()

	var r0 types.SourceID
	if rf, ok := ret.Get(0).(func() types.SourceID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.SourceID)
	}

	return r0
}

type VulnSrcUpdateArgs struct {
	Dir         string
	DirAnything bool
}

type VulnSrcUpdateReturns struct {
	Err error
}

type VulnSrcUpdateExpectation struct {
	Args    VulnSrcUpdateArgs
	Returns VulnSrcUpdateReturns
}

func (_m *MockVulnSrc) ApplyUpdateExpectation(e VulnSrcUpdateExpectation) {
	var args []interface{}
	if e.Args.DirAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Dir)
	}
	_m.On("Update", args...).Return(e.Returns.Err)
}

func (_m *MockVulnSrc) ApplyUpdateExpectations(expectations []VulnSrcUpdateExpectation) {
	for _, e := range expectations {
		_m.ApplyUpdateExpectation(e)
	}
}

// Update provides a mock function with given fields: dir
func (_m *MockVulnSrc) Update(dir string) error {
	ret := _m.Called(dir)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
